14_컬렉션(Collection) > 자바에서 제공하는 자료구조를 담당하는 프레임워크

다량에 데이터를 모아서 관리한다. (추가,삭제,수정,..) > 자료구조 : 데이터를 메모리에서 구조적으로 처리하는 방법론
자료구조를 배우는 이유는 "다량의 데이터를 효율적"으로 관리하기 위해서 배움
기능처리가 간단하게 해결 되어 자료구조적 알고리즘을 구현할 필요는없음
(자바에서는 구조만 알고 (흐름을 알아야지 응용이 가능) 이후에는 미리 만들어둔 함수나 문법을 사용하는것이다 더 좋다. > java.util에 포함되어있음)



컬렉션 주요 인터페이스 중에서 주로볼것
List > ArrayList
Set > HashSet
============= 위는 컬렉션 자식? 들로 보이는데 맵은 떨어져있음
Map > HashMap
 
컬렉션 (Collection)
" 자료구조가" 가 내장되어있는 클래스로 자바에서 제공하는 "자료구조" 를 담당하는 "프레임워크" 이다.
- 자료구조 : 방대한 데이터들을 효율적 (구조적) 으로 다룰 떄 필요한 개념
- 프레임워크 : 효율적인 기능들이 이미 정의되어있는 틀, 뼈대
 
> 정리해보면 데이터들이 새로우 추가되거나 , 삭제가 되거나, 수정이 되는 기능 들이 이미 코드로 정의되어있는  틀이 있다. == "컬렉션"
> 우리는 그동안 다량의 데이터들을 관리하고자 할때 "배열" 을 가지고 충분히 사용했었음!! 단, 배열의 단점 생각보다 크기 떄문에 보완한 것이 컬렉션!!
 
 배열과 컬렉션의 차이점
 - 배열의 단점
1) 배열을 쓰고자 할 때 먼저 크기를 지정해야함 > 한번 지정된 크기는 변경이 불가 새로운 값을 추가하고자 할 때 크기가 오버될 경우
 새로운 크기의 배열을 새롭게 만들고, 기존의 내용을 깊은복사 후  (코드를 내가 직접 다 짜야 함!!)

2) 배열 중간 위치에 새로운 데이터를 추가하거나 삭제하는 경우 기존의 값들을 앞으로 땡겨오거나 뒤로 밀어주는 코드를 일일이 다 짜야 함

3) 한 타입의 데이터들만 저장 가능
- 컬렉션의 장점
1. 크기에 제약이 없다.
> 크기 지정을 해줄 필요가 없고, 만일 크기지정을 하더라도
알아서 크기가 늘어나면서 새로운 데이터를 추가해주는 코드가 이미 작성되어 있음 
2. 중간에 값을 추가하거나 삭제하는 경우 값을 앞으로 떙겨오거나  뒤로 밀어주는 코드가 이미 메소드로 정의되어 있음 
3. 기본적으로 여러 타입의 데이터들을 저장할 수 있음 (단, 제네릭 설정을 통해서 한 타입의 데이터들만 담기게끔 유도 가능)
> 즉, 배열이 단점을 보완하기 위해 개발자인 내가 직접 코드를 다 짤 수 있지만 (알고리즘으로 구현) 이미 선배 개발자들이 쓰라고 메소드 단위로 코드를 짜 놨음!!
안 쓸 이유가..? 없음 컬렉션이라는 대체제가 있어서 실무에서는 배열을 거의 안쓴다.

4) 배열 vs 컬렉션을 써야 하는 경우
배열 : 방대한 데이터들을 단지 담아만 두고 "조회" 만 할 목적 
컬렉션 : 방대한 데이터들이 빈번하게 "추가","수정", "삭제" 가 될것 같다?

 컬렉션의 3가지 분류
Collection 자식 계열 - List, Set 계열

List 계열
담고자 하는 값(value) 만 저장 / 값 저장 시 순서 유지(index 개념 있음)
중복갑 허용
예) ArrayList, Vector, LinkedList >> ArrayList가 제일 많이 쓰임

Set 계열
담고자 하는 값(value) 만 저장 / 값 저장 시 순서 유지 X(index 개념 없음) / 
중복값 허용 X
예) HashSet, TreeSet


Map 계열
키(key) + 담고자 하는  값 (value) 세트로 저장 /
값 저장 시 순서 유지 X (index 개념 없음) / key 만 중복값 허용 X
예) HashMap, HashTable, Properties 

 제네릭 (Generic, <E>)
<여기> 안에 어떠한 타입을 선언해주어 
Collection 에 담을 데이터의 타입을 픽스 시켜주는 역할
> 별도의 제네릭 제시 없이 컬렉션 객체를 생성하면 E == Object
다형성 때문에 해당 컬렉션에 다양한 자식 타입들의 데이터를 모두 저장 가능!!
> 별도의 제네릭 설정을하게 되면 E == 해당타입   >> 해당 타입의 값들만 담을 수 있도록 유도할 수 있다!!
<String> 으로 설정하면 E  == String
<Music> 으로 설정하면 E == Music


* * 제네릭을 설정하는 이유
1. 명시한 타입의 데이터만 저장 가능 하도록 타입의 제한을 두기 위해
2. 컬렉션에 저장된 객체를 매번 꺼내서 사용할 때  매번 다형성에 의해 "형번환" 하는 절차를 줄일기 위해서!! (코드가 깔금)
* * 제네릭 설정 시 주의 사항
- 반드시 "참조자료형" 타입만 기술 가능하다!!
-  <int> (X)   --> <Integet> (0)
-  <double> (X) --> <Double> (0)
	  
	 

MVC 패턴
M: Model (데이터 관련 부분) - model.vo / model.dao
V : View (화면 관련 부분) - view 
C : Controller (기능 관련 부분) - controller

코드를 짜는 기법
코드를 데이터 관련 코드 / 화면 관련 코드 / 기능 관련 코드로 쪼개서 작성

